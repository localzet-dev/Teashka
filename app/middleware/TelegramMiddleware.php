<?php
/**
 * @package     Zorin Teashka
 * @link        https://teashka.zorin.space
 * @link        https://github.com/localzet-dev/Teashka
 *
 * @author      Ivan Zorin <creator@localzet.com>
 * @copyright   Copyright (c) 2018-2024 Zorin Projects S.P.
 * @license     https://www.gnu.org/licenses/agpl-3.0 GNU Affero General Public License v3.0
 *
 *              This program is free software: you can redistribute it and/or modify
 *              it under the terms of the GNU Affero General Public License as published
 *              by the Free Software Foundation, either version 3 of the License, or
 *              (at your option) any later version.
 *
 *              This program is distributed in the hope that it will be useful,
 *              but WITHOUT ANY WARRANTY; without even the implied warranty of
 *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *              GNU Affero General Public License for more details.
 *
 *              You should have received a copy of the GNU Affero General Public License
 *              along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 *              For any questions, please contact <creator@localzet.com>
 */

namespace app\middleware;

use app\model\User;
use app\service\Telegram;
use Exception;
use support\Log;
use Telegram\Bot\Exceptions\TelegramSDKException;
use Telegram\Bot\Objects\Chat;
use Telegram\Bot\Objects\Message;
use Telegram\Bot\Objects\Update;
use Throwable;
use Triangle\Engine\Exception\BusinessException;
use Triangle\Engine\Http\Request;
use Triangle\Engine\Http\Response;
use Triangle\Engine\Middleware\MiddlewareInterface;
use const PHP_EOL;

class TelegramMiddleware implements MiddlewareInterface
{
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º Telegram.
     *
     * @param Request $request –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞.
     * @param callable $handler –§—É–Ω–∫—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–ª–æ—è.
     * @return Response –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞.
     * @throws BusinessException
     * @throws TelegramSDKException
     * @throws Throwable
     */
    public function process(Request $request, callable $handler): Response
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–ø—Ä–æ—Å–æ–º –æ—Ç Telegram
        if (!$this->isTelegramRequest($request)) {
            throw new Exception("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç", 400);
        }

        Log::debug('–ó–∞–ø—Ä–æ—Å –æ—Ç Telegram', $request->toArray());

        try {
            $request->telegram = new Telegram(config('telegram.token'));
            $request->input = $request->telegram->parseInput($request);

            $request->type = $this->getType($request->input);
            $request->chat = $this->getChat($request->input);

            try {
                $request->message = $this->getMessage($request->input);
                $request->user = $this->getUser($request);
            } catch (BusinessException $error) {
                $request->telegram->sendMessage($error->getMessage(), $request->chat->id);
                return response('ok');
            }

            /** @var Response $response */
            $response = $handler($request);
        } catch (Throwable $exception) {
            Log::error($exception->getMessage(), ['exception' => (string)$exception, 'exception_arr' => (array)$exception]);
            throw $exception;
        }

        Log::debug('–û—Ç–≤–µ—Ç –¥–ª—è Telegram', ['body' => $response->rawBody()]);

        return $response;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–ø—Ä–æ—Å–æ–º –æ—Ç Telegram.
     *
     * @return bool –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏.
     */
    private function isTelegramRequest(Request $request): bool
    {
        // TODO: —Å–¥–µ–ª–∞—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±–µ–ª–æ–º—É —Å–ø–∏—Å–∫—É IP –∏–ª–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É X-Telegram-Bot-Api-Secret-Token

//        // –ü–æ–ª—É—á–∞–µ–º –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ IP-–∞–¥—Ä–µ—Å–æ–≤ Telegram –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
//        $whitelist = config('telegram.ips');
//
//        // –ï—Å–ª–∏ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å —è–≤–ª—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å–æ–º –æ—Ç Telegram
//        if ($whitelist === null) {
//            return true;
//        }
//
//        // –ü–æ–ª—É—á–∞–µ–º IP-–∞–¥—Ä–µ—Å –∑–∞–ø—Ä–æ—Å–∞
//        $requestIp = getRequestIp();
//
//        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ IP-–∞–¥—Ä–µ—Å –∑–∞–ø—Ä–æ—Å–∞ –æ–¥–Ω–æ–º—É –∏–∑ IP-–∞–¥—Ä–µ—Å–æ–≤ Telegram –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
//        foreach ($whitelist as $telegramIP) {
//            $telegramIpCidr = substr($telegramIP, 0, strpos($telegramIP, '/'));
//            if (ip2long($requestIp) & ip2long($telegramIpCidr)) {
//                return true;
//            }
//        }

        if ($request->header('X-Telegram-Bot-Api-Secret-Token') === getenv('TG_SECRET')) {
            return true;
        }

        return false;
    }

    /**
     * @throws Exception
     */
    private function getType(Update $input): ?string
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
        $event = $input->objectType();
        $supportedEvents = config('telegram.supported.events', []);
        if (!in_array($event, $supportedEvents)) {
            throw new Exception("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å", 400);
        }
        return $event;
    }

    /**
     * @throws Exception
     */
    private function getChat(Update $input): Chat
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
        $chat = $input->getChat();
        $supportedChatTypes = config('telegram.supported.types', []);
        if (!in_array($chat->type, $supportedChatTypes)) {
            throw new Exception("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —á–∞—Ç–∞", 400);
        }
        return $chat;
    }

    /**
     * @throws Exception
     */
    private function getMessage(Update $input): Message
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ)
        $message = $input->getMessage();
        if (!($message->text || $message->voice)) {
            throw new BusinessException("–ò–∑–≤–∏–Ω–∏, —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—èü•∫");
        }
        return $message;
    }

    /**
     * @throws Throwable
     * @throws TelegramSDKException
     */
    private function getUser(Request $request): User|null
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        $user = User::find($request->chat->id);

        if (!$user) {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            User::create(['id' => $request->chat->id, 'state' => User::START]);
            $request->telegram->sendMessage("–ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ –¢–∏—à–∫–∞, —á–∞—Ç-–±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –î–ì–¢–£ üê±" . PHP_EOL .
                "–Ø –æ—Å–æ–±–µ–Ω–Ω—ã–π, –ø–æ—Ç–æ–º—É —á—Ç–æ —è –ø–µ—Ä–≤—ã–π –±–æ—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏ –º–æ–∂–µ—Ç –ø–æ–Ω–∏–º–∞—Ç—å —Ç–µ–±—è, –¥–∞–∂–µ —Ç–≤–æ–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã!", $request->chat->id);
            throw new BusinessException("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π E-Mail (–ª–æ–≥–∏–Ω), –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ edu.donstu.ru");
        }

        return $user;
    }
}
